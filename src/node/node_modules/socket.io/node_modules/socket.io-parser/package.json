{
  "name": "socket.io-parser",
  "version": "1.0.2",
  "description": "socket.io protocol parser",
  "devDependencies": {
    "mocha": "*",
    "expect.js": "*"
  },
  "component": {
    "scripts": [
      "index.js"
    ]
  },
  "readme": "\n# socket.io-protocol\n\n  [![Build Status](https://secure.travis-ci.org/LearnBoost/socket.io-protocol.png)](http://travis-ci.org/LearnBoost/socket.io-protocol)\n\n  This repository contains the protocol specification and JavaScript\n  parser for the Socket.IO protocol.\n\n## Protocol version\n\n  **Current protocol revision:** `1`.\n\n## Parser API\n\n### Parser#encode(Object:packet):String\n\n  Encodes a `Packet` object as a string.\n\n### Parser#decode(String:packet):Packet\n\n  Returns a `Packet` object for the given string. If a parsing error\n  occurs the returned packet is an error object.\n\n### Parser#types\n\n  Array of packet type keys.\n\n### Packet\n\n  Each packet is represented as a vanilla `Object` with a `nsp` key that\n  indicates what namespace it belongs to (see \"Multiplexing\") and a \n  `type` key that can be one of the following:\n\n  - `Packet#CONNECT` (`0`)\n  - `Packet#DISCONNECT` (`1`)\n  - `Packet#EVENT` (`2`)\n  - `Packet#ACK` (`3`)\n  - `Packet#ERROR` (`4`)\n\n#### EVENT\n\n  - `data` (`Array`) a list of arguments, the first of which is the event\n    name. Arguments can contain any type of field that can result of \n    `JSON` decoding, including objects and arrays of arbitrary size.\n\n  - `id` (`Number`) if the `id` identifier is present, it indicates that the\n    server wishes to be acknowledged of the reception of this event.\n\n#### ACK\n\n  - `data` (`Array`) see `EVENT` `data`.\n  - `id` (`Number`) see `EVENT` `id`.\n\n#### ERROR\n\n  - `data` (`Mixed`) error data\n\n## Transport\n\n  The socket.io protocol can be delivered over a variety of transports.\n  [socket.io-client](http://github.com/learnboost/socket.io-client)\n  is the implementation of the protocol for the browser and Node.JS over\n  [engine.io-client](http://github.com/learnboost/engine.io-client).\n\n  [socket.io](http://github.com/learnboost/socket.io) is the server\n  implementation of the protocol over\n  [engine.io](http://github.com/learnboost/engine.io).\n\n## Multiplexing\n\n  Socket.IO has built-in multiplexing support, which means that each packet\n  always belongs to a given `namespace`, identified by a path string (like\n  `/this`). The corresponding key in the `Packet` object is `nsp`.\n\n  When the socket.io transport connection is established, a connection\n  attempt to the `/` namespace is assumed (ie: the server behaves as if\n  the client had sent a `CONNECT` packet to the `/` namespace).\n\n  In order to support multiplexing of multiple sockets under\n  the same transport, additional `CONNECT` packets can be sent by the\n  client to arbitrary namespace URIs (eg: `/another`).\n\n  When the server responds with a `CONNECT` packet to the corresponding\n  namespace, the multiplexed socket is considered connected.\n\n  Alternatively, the server can respond with an `ERROR` packet to indicate\n  a multiplexed socket connection error, such as authentication errors.\n  The associated error payload varies according to each error, and can\n  be user-defined.\n\n  After a `CONNECT` packet is received by the server for a given `nsp`,\n  the client can then send and receive `EVENT` packets. If any of the \n  parties receives an `EVENT` packet with an `id` field, an `ACK` packet is\n  expected to confirm the reception of said packet.\n\n## License\n\nMIT\n",
  "readmeFilename": "Readme.md",
  "_id": "socket.io-parser@1.0.2",
  "dist": {
    "shasum": "d334e61690f81a9daeafa934310fdfd9507c0627"
  },
  "_from": "socket.io-parser@1.0.2",
  "_resolved": "https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-1.0.2.tgz"
}
